@page "/shop/index"
@using IMaoTai.Core.Entity
@using IMaoTai.Core.Domain
@using IMaoTai.MasaUI.Core
@inherits AuthComponentBase
@inject IMaoTai.Core.Service.IShopService ShopService

<PageTitle>店铺管理</PageTitle>

<h1>店铺管理</h1>

@if (_shopList == null)
{
    <p><em>Loading...</em></p>
}
else
{
  <MCard>
    <MCardTitle>
        查询条件
        <MSpacer></MSpacer>
            <MTextField @bind-Value="_search.ShopId"
                    Label="商品ID"
                    SingleLine
                    HideDetails="true"></MTextField>
            <MTextField @bind-Value="_search.Province"
                        Label="省份"
                        SingleLine
                        HideDetails="true"></MTextField>
            <MTextField @bind-Value="_search.City"
                        Label="城市"
                        SingleLine
                        HideDetails="true"></MTextField>
            <MTextField @bind-Value="_search.Area"
                        Label="地区"
                        SingleLine
                        HideDetails="true"></MTextField>
            <MTextField @bind-Value="_search.CompanyName"
                        Label="公司"
                        SingleLine
                        HideDetails="true"></MTextField>

      </MCardTitle>
        <MRow Align="@AlignTypes.Center"
              Justify="@JustifyTypes.Center">
            <MToolbar>
                <MButton Depressed Color="primary"
                         Dark
                         Class="ma-2 white--text"
                         OnClick="GetShopListDataFromApi">
                    搜索
                </MButton> 
                <MButton Depressed Color="primary"
                         Dark
                         Class="ma-2 white--text"
                         OnClick="ClearSearch">
                    重置
                </MButton>    
                <MButton Depressed Color="indigo"
                         Dark
                         Class="ma-2 white--text"
                         OnClick="RefreshShopFromRemote">
                    刷新商店后台列表
                </MButton>     
            </MToolbar>
        </MRow>
        <MDataTable Headers="_headers" DisableFiltering
          Items="_shopList"
                    Id="ShopId" ItemKey="(a)=>{ return a.ShopId; }"
                    ShowSelect="true"
                Page="@_page"
                ItemsPerPage="@_itemsPerPage"
                OnOptionsUpdate="@HandleOnOptionsUpdate"
                ServerItemsLength="@_total"
                Loading="_loading"
                Class="elevation-1">
        <ItemColContent>
                @context.Value
        </ItemColContent>
        <NoDataContent>
                暂无数据.......
        </NoDataContent>
    </MDataTable>
  </MCard>

}

@code {
    private List<ShopEntity> _shopList = new List<ShopEntity>();
    private ShopListViewModel _search = new ShopListViewModel();
    private int _total;
    private bool _loading = true;
    private int _itemsPerPage = 10;
    private int _page = 1;
    private DataOptions _options = new(1, 10);

    private List<DataTableHeader<ShopEntity>> _headers = new()
    {
        new() { Text = "商店ID", Value = nameof(ShopEntity.ShopId) },
        new() { Text = "商店名称", Value = nameof(ShopEntity.Name) },
        new() { Text = "公司名称", Value = nameof(ShopEntity.CompanyName) },
        new() { Text = "省份", Value = nameof(ShopEntity.Province) },
        new() { Text = "城市", Value = nameof(ShopEntity.City) },
        new() { Text = "地区", Value = nameof(ShopEntity.Area) },
        new() { Text = "地址", Value = nameof(ShopEntity.UnbrokenAddress) },
        new() { Text = "经度", Value = nameof(ShopEntity.Lng) },
        new() { Text = "维度", Value = nameof(ShopEntity.Lat) },
        new() { Text = "创建时间", Value = nameof(ShopEntity.CreatedAt) },
    };
  

    public void ClearSearch()
    {
        _search = new();
        _options.Page = 1;
    }

    //刷新店铺数据
    public async Task RefreshShopFromRemote()
    {
        await ShopService.RefreshShop();
        //StateHasChanged();
        await GetShopListDataFromApi();
    }


    private async Task HandleOnOptionsUpdate(DataOptions options)
    {
        _options = options;
        await GetShopListDataFromApi();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetShopListDataFromApi();
            StateHasChanged();
        }
    }

    /// <summary>
    /// 获取列表信息
    /// </summary>
    /// <returns></returns>
    private async Task GetShopListDataFromApi()
    {
        _loading = true;
        _search.Current = _options.Page;
        _search.PageSize = _options.ItemsPerPage;
        var result = await ShopService.GetShopList(_search);
        _shopList = result.ShopList;
        _total = Convert.ToInt32(result.Total);
        _loading = false;
    }
}
